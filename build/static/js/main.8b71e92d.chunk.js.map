{"version":3,"sources":["Components/StatusComp.js","Components/Dropdown.js","Components/ReasonComp.js","Components/AuthorComp.js","Components/ScheduleComp.js","Components/AddToReq.js","App.js","serviceWorker.js","index.js"],"names":["StatusComp","state","changeDate","date","props","setState","setNewDate","inputNode","value","formattedDate","substr","this","setStatusDate","className","type","ref","node","onChange","id","onClick","Component","Dropdown","dropdownChange","event","title","target","toString","options","map","opt","key","ReasonComp","changeReason","changeAuthor","ScheduleComp","scheduleBool","impact","handleImpactChange","changeEvent","newBool","impactChange","chosenBool","buttonClicked","checked","AddToReq","addBool","added","addedChange","App","schedule_impact","addedBool","greyOut","cards","document","getElementsByClassName","forEach","card","style","filter","inputs","getElementsByTagName","input","border","color","axios","post","then","res","console","log","authorName","author","newReason","reason","obj","status_change","category","chosenStatus","categories","status","AuthorComp","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b71e92d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass StatusComp extends Component {\n    state = {\n        changeDate: false,\n        date: this.props.date\n    }\n    changeDate = () => {\n        this.setState({\n            changeDate: !this.state.changeDate\n        })\n    }\n\n    setNewDate = () => {\n        const date = this.inputNode.value;\n        const day = date.substr(8,2);\n        const month = date.substr(5,2);\n        const year = date.substr(0,4);\n        const formattedDate = day+\"/\"+month+\"/\"+year;\n        this.setState({\n            date: formattedDate\n        }, function () {\n            this.props.setStatusDate(this.inputNode.value)\n            this.setState({ changeDate: !this.state.changeDate })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"card-container statusChangeDate\">\n                <div className=\"card-content\">\n                    <div className=\"card-title\">status change</div>\n                    {this.state.changeDate ? <input type=\"date\" ref={node => (this.inputNode = node)} onChange={this.setNewDate} /> :\n                        <div id=\"change-date\" onClick={this.changeDate}>{this.state.date}</div>}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default StatusComp;","import React, { Component } from 'react';\n\nclass Dropdown extends Component {\n    dropdownChange = (event) => {\n        this.props.dropdownChange(this.props.title, event.target.value.toString())\n    }\n    render() {\n        return (\n            <div className=\"card-container\">\n                <div className=\"card-content\">\n                    <div className=\"card-title\">{this.props.title}</div>\n                    <div className=\"dropdown\">\n                    <select className=\"option\"id={this.props.title} onChange={this.dropdownChange}>\n                        {this.props.options.map(opt => <option key={opt}>{opt}</option>)}\n                    </select>\n                    </div>\n                </div>\n            </div>\n        )\n\n\n    }\n}\nexport default Dropdown;","\nimport React, { Component } from 'react';\n\nclass ReasonComp extends Component {\n    changeReason = (event) => {\n        this.props.changeReason(event.target.value)\n    }\n    render() {\n        return (\n            <div className=\"card-container reason-card\">\n                <div className=\"card-content\">\n                    <div className=\"card-title\">reason</div>\n                    <input id=\"reason-input-field\" type=\"text\" onChange={this.changeReason}></input>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ReasonComp;","import React, { Component } from 'react';\n\nclass ReasonComp extends Component {\n    changeAuthor = (event) => {\n        this.props.changeAuthor(event.target.value)\n    }\n   \n    render() {\n        return (\n            <div className=\"card-container author-container\">\n                <div className=\"card-content\">\n                    <div className=\"card-title\">change author</div>\n                    <input id=\"author-input-field\" type=\"text\" onChange={this.changeAuthor}></input>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ReasonComp;","import React, { Component } from 'react';\n\nclass ScheduleComp extends Component {\n    state = {\n        scheduleBool: this.props.impact\n    }\n\n    handleImpactChange = (changeEvent) => {\n        let newBool = changeEvent.target.value === \"yes\" ? true : false;\n        this.setState({ scheduleBool: newBool }, function () {\n            this.props.impactChange(this.state.scheduleBool)\n        });\n    }\n    render() {\n        const label = this.state.scheduleBool;\n        const chosenBool = label === true ? \"Yes\" : \"No\";\n        return (\n            <div className=\"card-container schedule-impact\">\n                <div className=\"card-content\">\n                    <div className=\"card-title\">schedule impact</div>\n                    {this.props.buttonClicked ? <div className=\"yes-no-label\">{chosenBool}</div> :\n                        <div className=\"yes-no-div\">\n                            <div className=\"yes-no-label yes-label\">Yes</div>\n                            <div className=\"yes-no-label no-label\">No</div>\n                            <input className=\"yes-radio\" type=\"radio\" value=\"yes\" checked={this.state.scheduleBool === true} onChange={this.handleImpactChange} />\n                            <input className=\"no-radio\" type=\"radio\" value=\"no\" checked={this.state.scheduleBool === false} onChange={this.handleImpactChange} />\n                        </div>}\n                </div>\n            </div>\n\n        );\n\n\n    }\n}\nexport default ScheduleComp;","import React, { Component } from 'react';\n\nclass AddToReq extends Component {\n    state = {\n        addBool: this.props.added\n    }\n\n    handleImpactChange = (changeEvent) => {\n        let newBool = changeEvent.target.value === \"yes\" ? true : false;\n        this.setState({ addBool: newBool }, function () {\n            this.props.addedChange(this.state.addBool)\n        });\n    }\n    render() {\n        const label = this.state.addBool;\n        const chosenBool = label === true ? \"Yes\" : \"No\";\n        return (\n            <div className=\"card-container schedule-impact\">\n                <div className=\"card-content\">\n                    <div className=\"card-title\">Add to Req</div>\n                    {this.props.buttonClicked ? <div className=\"yes-no-label\">{chosenBool}</div> :\n                        <div className=\"yes-no-div\">\n                            <div className=\"yes-no-label yes-label\">Yes</div>\n                            <div className=\"yes-no-label no-label\">No</div>\n                            <input className=\"yes-radio\" type=\"radio\" value=\"yes\" checked={this.state.addBool === true} onChange={this.handleImpactChange} />\n                            <input className=\"no-radio\" type=\"radio\" value=\"no\" checked={this.state.addBool === false} onChange={this.handleImpactChange} />\n                        </div>}\n                </div>\n            </div>\n\n        );\n\n    }\n}\nexport default AddToReq;\n\n\n/*{this.props.buttonClicked ? label:\n\n              <table>\n                  <thead>\n                      <tr className = \"yes-no-label\">\n                          <td>Yes</td>\n                          <td>No</td>\n                      </tr>\n                  </thead>\n                  <tbody>\n                      <tr>\n                          <td><input type=\"radio\" key=\"yes\" value=\"true\" checked={this.state.addBool===true} onChange={this.handleAddChange} /></td>\n                          <td><input type=\"radio\" key=\"no\" value=\"false\" checked={this.state.addBool===false} onChange={this.handleAddChange} /></td>\n                      </tr>\n                  </tbody>\n              </table>}*/","import React, { Component } from 'react';\nimport StatusComp from \"./Components/StatusComp.js\";\nimport Dropdown from './Components/Dropdown.js';\nimport ReasonComp from './Components/ReasonComp.js';\nimport AuthorComp from './Components/AuthorComp.js';\nimport ScheduleComp from './Components/ScheduleComp.js';\nimport AddToReq from './Components/AddToReq.js';\nimport \"./App.css\"\nimport axios from 'axios';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      category: \"\",\n      chosenStatus: \"\",\n      categories: ['You', 'can', 'do', 'it'],\n      status: ['positive', 'negative', 'undecided'],\n      status_change: '20/11/2020',\n      reason: 'Unclear',\n      schedule_impact: false,\n      added: true,\n      author: 'Ron Burgundy',\n      buttonClicked: false\n    }\n  }\n  impactChange=(scheduleBool)=>{\n    this.setState({\n      schedule_impact: scheduleBool\n    })\n  }\n\n  addedChange=(addedBool)=>{\n    this.setState({\n      added: addedBool\n    })\n  }\n \n  greyOut = () => {\n    this.setState({\n      buttonClicked: true\n    });\n\n    let cards = document.getElementsByClassName(\"card-container\");\n    [...cards].forEach(card => card.style.filter = \"grayscale(1)\");\n\n    let inputs = document.getElementsByTagName(\"input\");\n    [...inputs].forEach(input=>{\n      input.style.border = \"none\"; \n      input.style.color = \"lightgray\"\n    });\n\n    axios.post(`http://localhost:4000/add_data`, this.state)\n    .then(res => {\n      console.log(res)\n    })\n  }\n\n  changeAuthor=(authorName)=>{\n    this.setState({\n      author: authorName\n    })\n  }\n  changeReason=(newReason)=>{\n    this.setState({\n      reason: newReason\n    })\n  }\n  dropdownChange=(key,value)=>{\n    const stateKey = key ===\"categories\"? \"category\": \"chosenStatus\";\n    var obj  = {};\n    obj[stateKey] = value;\n    this.setState(obj);\n  }\n\n  setStatusDate=(date)=>{\n    this.setState({\n      status_change: date\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"main-title\">\n          <i className=\"material-icons\">keyboard_arrow_up</i>\n          Details\n          </div>\n        <div className=\"cards-wrapper\">\n        <Dropdown title=\"categories\" options={this.state.categories} dropdownChange={this.dropdownChange}/>\n        <Dropdown title=\"status\" options={this.state.status} dropdownChange={this.dropdownChange}/>\n        <StatusComp date={this.state.status_change} setStatusDate={this.setStatusDate}/>\n        <ReasonComp reason={this.state.reason} changeReason={this.changeReason}></ReasonComp>\n        <ScheduleComp buttonClicked={this.state.buttonClicked} impact={this.state.schedule_impact} impactChange={this.impactChange} />\n        <AddToReq buttonClicked={this.state.buttonClicked} added={this.state.added} addedChange={this.addedChange}/>\n        <AuthorComp author={this.state.author} changeAuthor={this.changeAuthor}></AuthorComp>\n        </div>\n        <button id=\"send-btn\" onClick={this.greyOut}>Send</button>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}